#!/usr/bin/env node

const {
  resolve,
  relative,
  join
} = require('path');

const stiks = require('../dist');
const cwd = process.cwd();
const log = stiks.log;
const srcDir = join(__dirname, '../', '/src/build');
const buildDir = resolve(join(cwd, 'build'));
const argv = process.argv.slice(2);

// Build doesn't exist create it.
if (!stiks.fs.existsSync(buildDir)) {

  // Warn suggest init.
  if (!~argv.indexOf('--init')) {
    log.warn(`stiks is missing build dir, use --init to initialize.`);
    return;
  }

  // Init by copying in build files.
  else {
    stiks.copyAll([srcDir + '|' + buildDir]);
    log.notify('successfully copied build tools!');
    return;
  }

}

if (~argv.indexOf('--patch')) {
  const patchSrc = join(buildDir, 'index.js');
  const patchDest = join(srcDir, 'index.js');
  stiks.copyAll([patchSrc + '|' + patchDest]);
  log.notify(`patched stiks index.js from ${patchSrc}.`);
  return;
}

if (~argv.indexOf('--upgrade')) {
  const copies = [
    join(buildDir, 'index.js') + '|' + join(buildDir, 'index.js.bak'),
    join(buildDir, 'spec.js') + '|' + join(buildDir, 'spec.js.bak'),
    join(srcDir, 'index.js') + '|' + join(buildDir, 'index.js'),
    join(srcDir, 'spec.js') + '|' + join(buildDir, 'spec.js'),
  ];
  stiks.copyAll(copies);
  return;
}

// Require the build tools.
require(resolve(join(cwd, 'build')));